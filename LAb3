#include<iostream> 
template <class T>
class Stack {
	T* begin;
	T* end;
	int size;
	Stack() {
		size = 100;
		begin = new T[size];
		end = begin;
	}
	Stack(int _n) {
		if (_n < 0) { std::throw invalid_argument("FFDDF") };
		size = _n;
		begin = new T[size];
		end = begin;
	}
	Stack(const Stack& s) size(s size) {
		begin = new T[size];
		for (int i = 0; i < size; i++) {
			begin[i] = s.begin[i];
		}
		end = begin + (s.end - s.begin);
	}
	~Stack() {
		delete[]begin
	};
	void Push(T el) {
		if (end - begin == size) {
			size *= 1.3;
			T* tmp = T[size];
			for (int i = 0; i < end - begin; i++) {
				tmp[i] = begin[i];
			}
			end = tmp + (end - begin);
			delete[] begin;
			begin = tmp;
		}
		*end = T el;
		end++;
	}
	T pop();
	bool is Empty();
	int size();
	void Pop();
};
